# What is Arrays ?
- Arrays is a **Data Structure that stores a fixed-size sequential collection of elements of the same type**.
- Each element in an array is identified by an index, which represents its position in the array.
# Why used Array ?
- Arrays are widely used because they allow efficient access to elements based on their index.
  This is useful when we need to store large amounts of data and process them efficiently. Arrays are also used for sorting, searching, accessing, and manipulating data.
- **Efficient Access** : Elements in an array can be accessed in constant time O(1) using their index, which makes array access very efficient.
- **Sequential Storage** : Elements in an array are stored sequentially in memory, making it straightforward to iterate over them in order.
- **Predictable Performance** : Arrays provide predictable performance characteristics for access, which can be important in time-sensitive applications.
# how we can used Array ?
- arrays are declared by specifying the element type followed by square brackets ([]).
- Here are Syntax of different ways to declare and use arrays:
  ```
    Syntax to Declare an Array in Java
        dataType[] arr; (or)  
        dataType []arr; (or)  
        dataType arr[];  
     Instantiation of an Array in Java
        arrayRefVar=new datatype[size];
     We can directly used array like
      datatype[] arr = {value1,value2,value3,.....,valueN};
  ```
# Example Of array
- Here are examples of different ways to declare and use arrays:

 ``` // Declaring an array of integers
int[] numbers = new int[5];  // creates an array with 5 elements

// Initializing elements of the array
numbers[0] = 10;
numbers[1] = 20;
numbers[2] = 30;
numbers[3] = 40;
numbers[4] = 50;

// Accessing elements of the array
System.out.println(numbers[2]);  // prints 30

// Arrays can also be initialized with values directly
String[] names = {"Alice", "Bob", "Charlie"};

// Accessing elements of the array using a loop
for (int i = 0; i < names.length; i++) {
    System.out.println("Name at index " + i + ": " + names[i]);
}
```




# Multidimensional Arrays in Java

## Overview

A multidimensional array in Java is an array of arrays. It allows you to create complex data structures like matrices and tables. The most common type is the two-dimensional array, but Java supports arrays of any dimension.

## Declaration and Initialization

### 1. Declaration

```java
int[][] array2D;
int[][][] array3D;
```

### 2. Initialization

You can initialize a multidimensional array at the time of declaration or afterwards.

#### At the time of declaration:

```java
int[][] array2D = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};
```

#### After declaration:

```java
int[][] array2D = new int[3][3]; // 3x3 matrix

array2D[0][0] = 1;
array2D[0][1] = 2;
array2D[0][2] = 3;
array2D[1][0] = 4;
array2D[1][1] = 5;
array2D[1][2] = 6;
array2D[2][0] = 7;
array2D[2][1] = 8;
array2D[2][2] = 9;
```

## Accessing Elements

You can access elements of a multidimensional array using row and column indices.

```java
int value = array2D[1][2]; // Access element at row 1, column 2 (zero-based index)
System.out.println(value); // Output: 6
```

## Iterating Through Multidimensional Arrays

### 1. Using nested `for` loops:

```java
for (int i = 0; i < array2D.length; i++) {
    for (int j = 0; j < array2D[i].length; j++) {
        System.out.print(array2D[i][j] + " ");
    }
    System.out.println();
}
```

### 2. Using enhanced `for` loops:

```java
for (int[] row : array2D) {
    for (int value : row) {
        System.out.print(value + " ");
    }
    System.out.println();
}
```

## Multidimensional Array Methods

### 1. Finding the length

You can find the length of each dimension in a multidimensional array.

```java
int rows = array2D.length; // Number of rows
int columns = array2D[0].length; // Number of columns in the first row
```

### 2. Summing all elements

```java
int sum = 0;
for (int[] row : array2D) {
    for (int value : row) {
        sum += value;
    }
}
System.out.println("Sum of all elements: " + sum);
```

### 3. Transposing a 2D array

Transposing an array involves swapping its rows and columns.

```java
int[][] transpose = new int[array2D[0].length][array2D.length];

for (int i = 0; i < array2D.length; i++) {
    for (int j = 0; j < array2D[i].length; j++) {
        transpose[j][i] = array2D[i][j];
    }
}

// Print transposed array
for (int[] row : transpose) {
    for (int value : row) {
        System.out.print(value + " ");
    }
    System.out.println();
}
```

## Jagged Arrays

Java also supports jagged arrays, which are arrays of arrays where the inner arrays can have different lengths.

### Declaration and Initialization

```java
int[][] jaggedArray = new int[3][];
jaggedArray[0] = new int[]{1, 2};
jaggedArray[1] = new int[]{3, 4, 5};
jaggedArray[2] = new int[]{6, 7, 8, 9};
```

### Accessing Jagged Array Elements

```java
int value = jaggedArray[1][2]; // Access element at row 1, index 2
System.out.println(value); // Output: 5
```

## Summary

Multidimensional arrays in Java provide a powerful way to work with complex data structures. Understanding how to declare, initialize, and manipulate these arrays is crucial for solving problems that involve matrices, tables, or any multi-level data organization. Whether working with fixed-size arrays or jagged arrays, Java's flexibility in handling multidimensional arrays makes it a versatile tool for programmers.
```
   
    
